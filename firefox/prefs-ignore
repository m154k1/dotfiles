#!/usr/bin/env bash

shopt -s extglob

declare ignore_file
declare source_file
declare profile_dir

declare ignore_pattern
declare keep_pattern

usage() {
  echo "Usage:"
  echo "  $(basename "$0") -s SOURCE [-i IGNORE] [-p PROFILE]"
  echo
  echo "Arguments:"
  echo "  -s SOURCE     Path to the user.js file generated by updater.sh."
  echo "  -i IGNORE     Path to the file with ignore rules. Default: user-ignore.conf."
  echo "  -p PROFILE    Path to the Firefox profile. Default: current directory."
  exit 0
}

join_pattern() {
  local pattern_arr=("$@")
  local result

  printf -v result '%s' "${pattern_arr[@]/#/|}"
  echo "${result:1}"
}

read_patterns() {
  local pattern_exp="([0-9*?]+)([[:space:]]#.*)?$"
  local ignore_arr=()
  local keep_arr=()

  while read -r line; do
    if [[ "$line" =~ ^$pattern_exp ]]; then
      ignore_arr+=("${BASH_REMATCH[1]}")
    elif [[ "$line" =~ ^\!$pattern_exp ]]; then
      keep_arr+=("${BASH_REMATCH[1]}")
    elif [ -n "$line" ] && [[ "$line" != \#* ]]; then
      echo "Unknown pattern: '$line'" >&2
      exit 1
    fi
  done < "${ignore_file:-user-ignore.conf}"

  if (( ${#ignore_arr[@]} )); then
    ignore_pattern="$(join_pattern ${ignore_arr[@]})"
  fi

  if (( ${#keep_arr[@]} )); then
    keep_pattern="$(join_pattern ${keep_arr[@]})"
  fi
}

write_prefs() {
  local pref_id

  while IFS="" read -r line || [ -n "$line" ]; do
    if [ -n "$pref_id" ] && [[ "$line" =~ ^user_pref\(.*\)\;.* ]] && \
      ( [ -n "$ignore_pattern" ] && [[ $pref_id == +($ignore_pattern) ]] ) && \
      ( [ -z "$keep_pattern" ] || [[ $pref_id == !($keep_pattern) ]] )
    then
      echo "   // $line"
      continue
    fi

    if [[ "$line" =~ ^\/\*.([0-9]{4}):.* ]]; then
      pref_id="${BASH_REMATCH[1]}"
    elif [ -z "$line" ] || [[ "$line" =~ ^\/\*{2,}.* ]]; then
      unset pref_id
    fi

    echo "$line"
  done < "$source_file" > "${profile_dir:-.}/user.js"
}

[[ ! $@ =~ ^\-.+ ]] && { usage; }

while getopts "i:s:p:" opt; do
  case $opt in
    i)
      [ ! -e "$OPTARG" ] && { usage; }
      ignore_file="$OPTARG"
      ;;
    s)
      [ ! -e "$OPTARG" ] && { usage; }
      source_file="$OPTARG"
      ;;
    p)
      [ ! -e "$OPTARG" ] && { usage; }
      profile_dir="$OPTARG"
      ;;
    \?)
      usage
      ;;
  esac
done

echo "Reading ignore rules..."
read_patterns
echo "Writing prefs..."
write_prefs
echo "Done."

# vi:set ts=2 sw=2 et:
